"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const feeding_1 = require("../../../src/entities/feeding");
const sequelize_feeding_repo_1 = require("../../../src/services/database/sequelize-feeding-repo");
const models_1 = require("../../../src/services/database/models");
const employee_1 = require("../../../src/entities/employee");
const tank_1 = require("../../../src/entities/tank");
const fishSpecie_1 = require("../../../src/entities/fishSpecie");
const businessPartner_1 = require("../../../src/entities/businessPartner");
const food_1 = require("../../../src/entities/food");
const sequelize_fishSpecie_repo_1 = require("../../../src/services/database/sequelize-fishSpecie-repo");
const sequelize_tank_repo_1 = require("../../../src/services/database/sequelize-tank-repo");
const sequelize_food_repo_1 = require("../../../src/services/database/sequelize-food-repo");
const sequelize_businessPartner_repo_1 = require("../../../src/services/database/sequelize-businessPartner-repo");
const sequelize_employee_repo_1 = require("../../../src/services/database/sequelize-employee-repo");
describe("sequelize feedings repository", () => {
    const sequelizeFeedingRepo = new sequelize_feeding_repo_1.SequelizeFeedingRepo();
    const sequelizeSpecieRepo = new sequelize_fishSpecie_repo_1.SequelizeFishSpecieRepo();
    const sequelizeTankRepo = new sequelize_tank_repo_1.SequelizeTankRepo();
    const sequelizeFoodRepo = new sequelize_food_repo_1.SequelizeFoodRepo();
    const sequelizeEmployeeRepo = new sequelize_employee_repo_1.SequelizeEmployeeRepo();
    const sequelizePartnerRepo = new sequelize_businessPartner_repo_1.SequelizeBusinessPartnerRepo();
    let employeeId;
    let employeeId2;
    let specieId;
    let tankId;
    let sellerId;
    let foodId;
    let feedingId;
    let feedingId2;
    let feeding;
    let feeding2;
    const specie = new fishSpecie_1.FishSpecie("tilapia", "flakes", { min: 20, max: 28 }, { min: 13, max: 22 }, { min: 5, max: 8 });
    const tank = new tank_1.Tank(specie, "L-A2", "room 2", 45, 1300);
    const employee = new employee_1.Employee("david", "david@mail.com", "president", "123");
    const employee2 = new employee_1.Employee("aaron", "aaron@mail.com", "president", "123");
    const seller = new businessPartner_1.BusinessPartner(123, "company@mail.com", "company llc", "street 6, 311");
    const food = new food_1.Food("flakes", 100, 1299.0, new Date("2025-11-11"), seller);
    beforeEach(async () => {
        await models_1.Feedings.sync({ force: true });
        await models_1.Foods.sync({ force: true });
        await models_1.BusinessPartners.sync({ force: true });
        await models_1.Tanks.sync({ force: true });
        await models_1.FishSpecies.sync({ force: true });
        await models_1.Employees.sync({ force: true });
        employeeId = await sequelizeEmployeeRepo.add(employee);
        employeeId2 = await sequelizeEmployeeRepo.add(employee2);
        specieId = await sequelizeSpecieRepo.add(specie);
        tankId = await sequelizeTankRepo.add(tank);
        sellerId = await sequelizePartnerRepo.add(seller);
        foodId = await sequelizeFoodRepo.add(food);
        feedingId = await sequelizeFeedingRepo.add((feeding = new feeding_1.Feeding(employee, tank, food, 10, new Date())));
        feedingId2 = await sequelizeFeedingRepo.add((feeding2 = new feeding_1.Feeding(employee2, tank, food, 11, new Date())));
    }, 20000);
    afterAll(async () => {
        await models_1.Feedings.sync({ force: true });
        await models_1.Foods.sync({ force: true });
        await models_1.BusinessPartners.sync({ force: true });
        await models_1.Tanks.sync({ force: true });
        await models_1.FishSpecies.sync({ force: true });
        await models_1.Employees.sync({ force: true });
    }, 20000);
    it("adds a feeding to the repository", async () => {
        expect(feedingId).toBeTruthy();
    });
    it("finds a feeding by id", async () => {
        const retrievedFeeding = await sequelizeFeedingRepo.find(feedingId);
        const shouldBeUndefined = await sequelizeFeedingRepo.find("12345");
        expect(retrievedFeeding).toBeInstanceOf(feeding_1.Feeding);
        expect(retrievedFeeding?.id).toEqual(feedingId);
        expect(shouldBeUndefined).toBeUndefined();
    });
    it("finds feedings by some given employee attribute", async () => {
        const feedingsByEmail = await sequelizeFeedingRepo.findByEmployee("email", "david@mail.com");
        const feedingsByName = await sequelizeFeedingRepo.findByEmployee("name", "aaron");
        const feedingsByRole = await sequelizeFeedingRepo.findByEmployee("role", "president");
        expect(JSON.stringify(feedingsByEmail[0])).toEqual(JSON.stringify(feeding));
        expect(feedingsByEmail[1]).toBeFalsy();
        expect(JSON.stringify(feedingsByName[0])).toEqual(JSON.stringify(feeding2));
        expect(feedingsByName[1]).toBeFalsy();
        expect(JSON.stringify(feedingsByRole[0])).toEqual(JSON.stringify(feeding));
        expect(JSON.stringify(feedingsByRole[1])).toEqual(JSON.stringify(feeding2));
        expect(feedingsByRole[2]).toBeFalsy();
    }, 10000);
    it("deletes a given feeding", async () => {
        await sequelizeFeedingRepo.delete(feedingId);
        const shouldBeUndefined = await sequelizeFeedingRepo.find(feedingId);
        expect(shouldBeUndefined).toBeUndefined();
    });
    it("lists all feedings", async () => {
        const feedingList = await sequelizeFeedingRepo.list();
        expect(feedingList[0]).toBeInstanceOf(feeding_1.Feeding);
        expect(feedingList[0].id).toEqual(feedingId);
        expect(feedingList[1].id).toEqual(feedingId2);
    });
});
