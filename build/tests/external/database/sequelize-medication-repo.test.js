"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const medication_1 = require("../../../src/entities/medication");
const sequelize_medication_repo_1 = require("../../../src/services/database/sequelize-medication-repo");
const models_1 = require("../../../src/services/database/models");
const employee_1 = require("../../../src/entities/employee");
const tank_1 = require("../../../src/entities/tank");
const fishSpecie_1 = require("../../../src/entities/fishSpecie");
const businessPartner_1 = require("../../../src/entities/businessPartner");
const treatment_1 = require("../../../src/entities/treatment");
const sequelize_fishSpecie_repo_1 = require("../../../src/services/database/sequelize-fishSpecie-repo");
const sequelize_tank_repo_1 = require("../../../src/services/database/sequelize-tank-repo");
const sequelize_treatment_repo_1 = require("../../../src/services/database/sequelize-treatment-repo");
const sequelize_businessPartner_repo_1 = require("../../../src/services/database/sequelize-businessPartner-repo");
const sequelize_employee_repo_1 = require("../../../src/services/database/sequelize-employee-repo");
describe("sequelize medications repository", () => {
    const sequelizeMedicationRepo = new sequelize_medication_repo_1.SequelizeMedicationRepo();
    const sequelizeSpecieRepo = new sequelize_fishSpecie_repo_1.SequelizeFishSpecieRepo();
    const sequelizeTankRepo = new sequelize_tank_repo_1.SequelizeTankRepo();
    const sequelizeTreatmentRepo = new sequelize_treatment_repo_1.SequelizeTreatmentRepo();
    const sequelizeEmployeeRepo = new sequelize_employee_repo_1.SequelizeEmployeeRepo();
    const sequelizePartnerRepo = new sequelize_businessPartner_repo_1.SequelizeBusinessPartnerRepo();
    let employeeId;
    let employeeId2;
    let specieId;
    let tankId;
    let sellerId;
    let treatmentId;
    let medicationId;
    let medicationId2;
    let medication;
    let medication2;
    const specie = new fishSpecie_1.FishSpecie("tilapia", "flakes", { min: 20, max: 28 }, { min: 13, max: 22 }, { min: 5, max: 8 });
    const tank = new tank_1.Tank(specie, "L-A2", "room 2", 45, 1300);
    const employee = new employee_1.Employee("david", "david@mail.com", "president", "123");
    const employee2 = new employee_1.Employee("aaron", "aaron@mail.com", "president", "123");
    const seller = new businessPartner_1.BusinessPartner(123, "company@mail.com", "company llc", "street 6, 311");
    const treatment = new treatment_1.Treatment("skin med", 100, 1299.0, new Date("2025-11-11"), seller);
    beforeEach(async () => {
        await models_1.Medications.sync({ force: true });
        await models_1.Treatments.sync({ force: true });
        await models_1.BusinessPartners.sync({ force: true });
        await models_1.Tanks.sync({ force: true });
        await models_1.FishSpecies.sync({ force: true });
        await models_1.Employees.sync({ force: true });
        employeeId = await sequelizeEmployeeRepo.add(employee);
        employeeId2 = await sequelizeEmployeeRepo.add(employee2);
        specieId = await sequelizeSpecieRepo.add(specie);
        tankId = await sequelizeTankRepo.add(tank);
        sellerId = await sequelizePartnerRepo.add(seller);
        treatmentId = await sequelizeTreatmentRepo.add(treatment);
        medicationId = await sequelizeMedicationRepo.add((medication = new medication_1.Medication(employee, tank, treatment, 10, new Date())));
        medicationId2 = await sequelizeMedicationRepo.add((medication2 = new medication_1.Medication(employee2, tank, treatment, 11, new Date())));
    }, 20000);
    afterAll(async () => {
        await models_1.Medications.sync({ force: true });
        await models_1.Treatments.sync({ force: true });
        await models_1.BusinessPartners.sync({ force: true });
        await models_1.Tanks.sync({ force: true });
        await models_1.FishSpecies.sync({ force: true });
        await models_1.Employees.sync({ force: true });
    }, 20000);
    it("adds a medication to the repository", async () => {
        expect(medicationId).toBeTruthy();
    });
    it("finds a medication by id", async () => {
        const retrievedMedication = await sequelizeMedicationRepo.find(medicationId);
        const shouldBeUndefined = await sequelizeMedicationRepo.find("12345");
        expect(retrievedMedication).toBeInstanceOf(medication_1.Medication);
        expect(retrievedMedication?.id).toEqual(medicationId);
        expect(shouldBeUndefined).toBeUndefined();
    });
    it("finds medications by some given employee attribute", async () => {
        const medicationsByEmail = await sequelizeMedicationRepo.findByEmployee("email", "david@mail.com");
        const medicationsByName = await sequelizeMedicationRepo.findByEmployee("name", "aaron");
        const medicationsByRole = await sequelizeMedicationRepo.findByEmployee("role", "president");
        expect(JSON.stringify(medicationsByEmail[0])).toEqual(JSON.stringify(medication));
        expect(medicationsByEmail[1]).toBeFalsy();
        expect(JSON.stringify(medicationsByName[0])).toEqual(JSON.stringify(medication2));
        expect(medicationsByName[1]).toBeFalsy();
        expect(JSON.stringify(medicationsByRole[0])).toEqual(JSON.stringify(medication));
        expect(JSON.stringify(medicationsByRole[1])).toEqual(JSON.stringify(medication2));
        expect(medicationsByRole[2]).toBeFalsy();
    }, 10000);
    it("deletes a given medication", async () => {
        await sequelizeMedicationRepo.delete(medicationId);
        const shouldBeUndefined = await sequelizeMedicationRepo.find(medicationId);
        expect(shouldBeUndefined).toBeUndefined();
    });
    it("lists all medications", async () => {
        const medicationList = await sequelizeMedicationRepo.list();
        expect(medicationList[0]).toBeInstanceOf(medication_1.Medication);
        expect(medicationList[0].id).toEqual(medicationId);
        expect(medicationList[1].id).toEqual(medicationId2);
    });
});
